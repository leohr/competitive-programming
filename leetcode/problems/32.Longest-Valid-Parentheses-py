class Solution:
    def longestValidParentheses(self, s: str) -> int:
        # Create stack for storing positions of left-parentheses 
        st = [] 
        # Create list of wrong placed parentheses 
        wrong = [] 
        
        # Loop over string and check if parenthesis is ok 
        # If it is not, then append its position to 'wrong'
        ans = 0 
        for i in range(len(s)):
            p = s[i]
            if p == '(': 
                st.append(i)
            if p == ')': 
                if st: 
                    st.pop(-1)
                else: 
                    wrong.append(i)
        
        # Loop over the stack and recover wrong parentheses
        for i in st: 
            wrong.append(i) 
        
        # Get answer as max difference from list of wrong positions
        if not wrong: 
            ans = len(s) 
        else:  
            wrong.sort() 
            ans = wrong[0] - 0
            i = 1 
            while i < len(wrong): 
                ans = max(ans, wrong[i] - wrong[i-1] - 1) 
                i += 1 
            ans = max(ans, len(s) - wrong[-1] - 1)
            
        return(ans) 
